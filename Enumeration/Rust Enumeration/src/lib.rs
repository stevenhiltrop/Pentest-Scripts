use sys_info;
#[cfg(target_os = "linux")]
use std::fs::File;
#[cfg(target_os = "linux")]
use std::io::{self, BufRead};

#[cfg(target_os = "windows")]
use winapi::um::winbase::{LocalFree, NetUserEnum, NetApiBufferFree};
#[cfg(target_os = "windows")]
use winapi::um::lmaccess::USER_INFO_0;
#[cfg(target_os = "windows")]
use winapi::shared::lmcons::MAX_PREFERRED_LENGTH;

fn get_user() {
    // Get and print the current user's name
    let username = whoami::username();
    println!("Current user: {}", username);
}

fn get_system() -> (&'static str, &'static str) {
    // Get operating system and architecture
    let os = std::env::consts::OS;
    let arch = std::env::consts::ARCH;

    println!("Operating System: {}", os);
    println!("Architecture: {}", arch);

    // Fetch and print detailed system information
    let info = [
        ("OS Type", sys_info::os_type()),
        ("OS Release", sys_info::os_release()),
        ("Number of CPUs", sys_info::cpu_num().map(|n| n.to_string())),
        ("Total Memory", sys_info::mem_info().map(|mem| format!("{} KB", mem.total))),
    ];

    for (label, result) in &info {
        match result {
            Ok(value) => println!("{}: {}", label, value),
            Err(e) => eprintln!("Error getting {}: {}", label, e),
        }
    }

    (os, arch)
}

fn list_users(os: &str) {
    match os {
        "linux" => list_linux_users(),
        "windows" => list_windows_users(),
        _ => eprintln!("Unsupported operating system specified: {}", os),
    }
}

#[cfg(target_os = "linux")]
fn list_linux_users() {
    const PATH: &str = "/etc/passwd";
    if let Ok(file) = File::open(PATH) {
        let reader = io::BufReader::new(file);
        for line in reader.lines() {
            if let Ok(line) = line {
                if let Some(user) = line.split(':').next() {
                    println!("User: {}", user);
                }
            }
        }
    } else {
        eprintln!("Error: Could not open {}", PATH);
    }
}

#[cfg(target_os = "windows")]
fn list_windows_users() {
    unsafe {
        let mut buf: *mut USER_INFO_0 = std::ptr::null_mut();
        let mut entries: DWORD = 0;
        let mut total_entries: DWORD = 0;

        let result = NetUserEnum(
            std::ptr::null_mut(),
            0,
            2, // User accounts
            &mut buf as *mut *mut _ as *mut *mut std::ffi::c_void,
            MAX_PREFERRED_LENGTH,
            &mut total_entries,
            &mut entries,
            std::ptr::null_mut(),
        );

        if result == 0 {
            for i in 0..total_entries {
                let user_info = *(buf.offset(i as isize) as *mut USER_INFO_0);
                let username = std::ffi::CStr::from_ptr(user_info.usri0_name).to_string_lossy();
                println!("User: {}", username);
            }
            NetApiBufferFree(buf as *mut std::ffi::c_void);
        } else {
            eprintln!("Error retrieving user list: {}", result);
        }
    }
}

fn main() {
    get_user(); // Print current user
    let (os, arch) = get_system(); // Get and print system information
    list_users(os); // List all users
}
