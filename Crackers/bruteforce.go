package main

import (
	"fmt"
	"time"

	zip "github.com/alexmullins/zip"
)

func main() {

	// filename to bruteforce
	filename := "anon.zip"

	// max password length to try to crack
	maxLength := 8

	// alphabet to use for bruteforce

	//alphabet := "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-+="
	alphabet := "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"

	// get all combinantions
	allCombos := []string{}

	for x := 1; x < maxLength+1; x++ {
		combos := []string{}
		getCombos(alphabet, x, "", &combos)

		for i := 0; i < len(combos); i++ {
			allCombos = append(allCombos, combos[i])
		}
	}

	// try all possible combinations
	pswdFound := false
	pswd := ""
	fmt.Println("Starting to Crack!!")
	start := time.Now()
	for idx := 0; idx < len(allCombos); idx++ {
		if idx%5000 == 0 {
			fmt.Println((idx/len(allCombos))*100, "|", idx, len(allCombos))
		}
		pswd = allCombos[idx]
		if readZipFile(filename, pswd) == "good" {
			pswdFound = true
			break
		}
	}
	if pswdFound {
		fmt.Println("\nPassword Found: " + pswd)
		fmt.Println("Password Found In:", time.Since(start))
	} else {
		fmt.Println("Couldn't find Password.")
	}

}

func readZipFile(filename string, password string) string {
	r, err := zip.OpenReader(filename)
	if err != nil {
		panic(err)
	}

	defer r.Close()

	for _, f := range r.File {
		f.SetPassword(password)
		rc, err2 := f.Open()
		if err2 != nil {
			return "bad"
		}
		rc.Close()
		r.Close()
		return "good"
	}
	return "good"
}

func getCombos(alphabet string, length int, curr string, combos *[]string) {
	if len(curr) == length {
		*combos = append(*combos, curr)
	} else {
		for i := 0; i < len(alphabet); i++ {
			oldCurr := curr
			curr = curr + string(alphabet[i])
			getCombos(alphabet, length, curr, combos)
			curr = oldCurr
		}

	}
}
